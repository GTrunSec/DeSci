<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Decentralized Data Science</title>
    <link>https://exquisite-meringue-7af06d.netlify.app/</link>
    <description>Recent content on Decentralized Data Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Feb 2023 08:25:16 +0000</lastBuildDate><atom:link href="https://exquisite-meringue-7af06d.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Julia Graph</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/julia-graph/</link>
      <pubDate>Sun, 19 Feb 2023 08:25:16 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/julia-graph/</guid>
      <description>using Graphs: smallgraph g = smallgraph(:karate) {34, 78} undirected simple Int64 graph #| label: fig-parametric #| fig-cap: &amp;#34;Parametric Plots&amp;#34; using Compose, Cairo, GraphPlot using Graphs: smallgraph g = smallgraph(:karate) draw(PNG(&amp;#34;./attach/gplot.png&amp;#34;, 16cm, 16cm), gplot(g)) gplot(g) #| echo: true using Plots scatter(rand(100), rand(100)) savefig(&amp;#34;./attach/plot.png&amp;#34;) plot(rand(100), rand(100)) Unicode #| output: true #| echo: true #| code-fold: true using UnicodePlots lineplot([-1, 2, 3, 7], [-1, 2, 9, 4], title=&amp;#34;Example&amp;#34;, name=&amp;#34;Line&amp;#34;, xlabel=&amp;#34;x&amp;#34;, ylabel=&amp;#34;y&amp;#34;) </description>
    </item>
    
    <item>
      <title>Julia Eval</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/julia-eval/</link>
      <pubDate>Sun, 19 Feb 2023 08:25:13 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/julia-eval/</guid>
      <description>using Dates format = DateFormat(&amp;#34;yyyymmdd&amp;#34;) Date(&amp;#34;19870913&amp;#34;, format) 1987-09-13 </description>
    </item>
    
    <item>
      <title>Attack Models</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/attack-models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/attack-models/</guid>
      <description>Queries cat $(2&amp;gt;/dev/null nix build .#x86_64-linux.models.lib.mitre-attack-queries --print-out-paths --no-link) { &amp;#34;T0000&amp;#34;: { &amp;#34;Azure Sentinel&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Suspicious Filename Used&amp;#34;, &amp;#34;product&amp;#34;: &amp;#34;Azure Sentinel&amp;#34;, &amp;#34;query&amp;#34;: &amp;#34;Sysmon| where EventID == 1 and (process_path == \&amp;#34;a.exe\&amp;#34;or process_path == \&amp;#34;b.exe\&amp;#34;or process_path == \&amp;#34;c.exe\&amp;#34;or process_path == \&amp;#34;d.exe\&amp;#34;or process_path == \&amp;#34;e.exe\&amp;#34;or process_path == \&amp;#34;f.exe\&amp;#34;or process_path == \&amp;#34;g.exe\&amp;#34;or process_path == \&amp;#34;h.exe\&amp;#34;or process_path == \&amp;#34;i.exe\&amp;#34;or process_path == \&amp;#34;j.exe\&amp;#34;or process_path == \&amp;#34;k.exe\&amp;#34;or process_path == \&amp;#34;l.exe\&amp;#34;or process_path == \&amp;#34;m.exe\&amp;#34;or process_path == \&amp;#34;n.exe\&amp;#34;or process_path == \&amp;#34;o.</description>
    </item>
    
    <item>
      <title>Bash</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/bash/</guid>
      <description>NuShell echo </description>
    </item>
    
    <item>
      <title>Jupyter Kernels</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/jupyter-kernels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/jupyter-kernels/</guid>
      <description>linkKernels nix run .\#x86_64-linux.kernels.entrypoints.linkKernels </description>
    </item>
    
    <item>
      <title>Nushell</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/nushell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/nushell/</guid>
      <description>DataFrame Commands vast export nu -c &amp;#39;vast export -n 1 json | from json&amp;#39; nu -c &amp;#39;vast export -n 1 json | from json&amp;#39; [21:19:48.072] client connects to VAST node at 127.0.0.1:42000/tcp [21:19:48.076] exporter processed 13 candidates at a rate of 18984 candidates/sec and shipped 1 results in 684.8us [21:19:48.076] json-writer received first result with a latency of 3.7ms [21:19:48.076] json-writer-6 reached limit of 1 events â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â”‚ ts â”‚ 2022-09-08T05:16:18.</description>
    </item>
    
    <item>
      <title>observablehq</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/observablehq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/observablehq/</guid>
      <description>//| echo: true Plot.rectY(filtered, Plot.binX( {y: &amp;#34;count&amp;#34;}, {x: &amp;#34;body_mass&amp;#34;, fill: &amp;#34;species&amp;#34;, thresholds: 20} )) .plot({ facet: { data: filtered, x: &amp;#34;sex&amp;#34;, y: &amp;#34;species&amp;#34;, marginRight: 80 }, marks: [ Plot.frame(), ] } ) </description>
    </item>
    
    <item>
      <title>Phishing</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/phishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/phishing/</guid>
      <description>C4 Diagram &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;no&#34;?&gt;Python[Container]Training DataSet[Container]Phishing.url.data[parserÂ data]Â mergeÂ theÂ phishing.url.datafromÂ zeekPhishing.url.result[matchÂ indicates]Â getÂ phishing-url-result.jsonbyÂ pythonÂ scriptdone.phishing.result[vastÂ exportÂ json&#39;done.phishing.url.result.result==Â 0&#39;]Â getÂ theÂ resultÂ byÂ themachine-learningÂ modeltrue/false.phishing.result[vastÂ exportÂ jsontrue/false.phishing.url.result.result==Â 0&#39;]Â AfterÂ analyzingÂ done.result,pickÂ theÂ resultÂ toÂ true/falsetypeTrainingÂ model[getÂ model]Â ThroughÂ machineÂ learningalgorithms,Â weÂ canÂ generaterelevantÂ phishingÂ indicatesmodelsÂ throughtrue.phishing.resultÂ datasetNewÂ PhishingÂ model[extendedÂ result.dataSet]Â identifyÂ suspicious,anomalousÂ orÂ misjudgmentdataMachineÂ Learning[TraningÂ PhishingÂ Model]Â phishing-url-resutl.jsonÂ -&amp;gt;probeï¼Œtrue/false.phishing-url-result.json-&amp;gt;Â newÂ phishing-modelVast[QueryÂ URL]Â QueryÂ EngineGoÂ SpiderÂ Application[extractingÂ relevantÂ info]Â phishing-features.jsonÂ -&amp;gt;indicates.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/python/</guid>
      <description>Packages Pytorch nixpkgs import torch print(torch.__version__) 1.13.1 ibis tensorflow nixpkgs # import tensorflow as tf # print(tf.__version__) 2023-01-09 11:34:03.507478: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations: SSE3 SSE4.1 SSE4.2 AVX AVX2 FMA To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags. 2.10.1 polars poetry import polars as pl df = pl.</description>
    </item>
    
    <item>
      <title>Tullia</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/tullia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/tullia/</guid>
      <description>runtimes unwrapped tullia run julia-cli --runtime unwrapped --log-level debug [90m11:02PM[0m [33mDBG[0m parsed args [36mconfig=[0m{&amp;#34;DagFlake&amp;#34;:&amp;#34;.#tullia.x86_64-linux.dag&amp;#34;,&amp;#34;Mode&amp;#34;:&amp;#34;cli&amp;#34;,&amp;#34;Runtime&amp;#34;:&amp;#34;unwrapped&amp;#34;,&amp;#34;Task&amp;#34;:&amp;#34;julia-cli&amp;#34;,&amp;#34;TaskFlake&amp;#34;:&amp;#34;.#tullia.x86_64-linux.task&amp;#34;} path &amp;#39;/home/gtrun/ghq/github.com/GTrunSec/DeSci/docs/org&amp;#39; does not contain a &amp;#39;flake.nix&amp;#39;, searching up warning: Git tree &amp;#39;/home/gtrun/ghq/github.com/GTrunSec/DeSci&amp;#39; is dirty [90m11:02PM[0m [1m[31mFTL[0m[0m starting CLI [36merror=[0m[31m&amp;#34;open /dev/tty: no such device or address&amp;#34;[0m Podman tullia run julia-cli --runtime podman --log-level debug [90m11:02PM[0m [33mDBG[0m parsed args [36mconfig=[0m{&amp;ldquo;DagFlake&amp;rdquo;:&amp;quot;.#tullia.x86_64-linux.dag&amp;quot;,&amp;ldquo;Mode&amp;rdquo;:&amp;ldquo;cli&amp;rdquo;,&amp;ldquo;Runtime&amp;rdquo;:&amp;ldquo;podman&amp;rdquo;,&amp;ldquo;Task&amp;rdquo;:&amp;ldquo;julia-cli&amp;rdquo;,&amp;ldquo;TaskFlake&amp;rdquo;:&amp;quot;.#tullia.x86_64-linux.task&amp;quot;} path &amp;lsquo;/home/gtrun/ghq/github.com/GTrunSec/DeSci/docs/org&amp;rsquo; does not contain a &amp;lsquo;flake.nix&amp;rsquo;, searching up warning: Git tree &amp;lsquo;/home/gtrun/ghq/github.com/GTrunSec/DeSci&amp;rsquo; is dirty [90m11:02PM[0m [1m[31mFTL[0m[0m starting CLI [36merror=[0m[31m&amp;quot;open /dev/tty: no such device or address&amp;quot;[0m</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>https://exquisite-meringue-7af06d.netlify.app/posts/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://exquisite-meringue-7af06d.netlify.app/posts/usage/</guid>
      <description>devshell With nix develop nix develop &amp;amp;&amp;amp; menu With direnv direnv allow Docs address: http://localhost:1313/LambdaHunt/posts run hugo server nix develop .#doc --command mkdoc server sync your docs nix develop .#doc --command mkdoc </description>
    </item>
    
  </channel>
</rss>
